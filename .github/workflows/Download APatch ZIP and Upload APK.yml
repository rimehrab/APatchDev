name: Download APatch ZIP and Upload APK

on:
  push:
    branches: [main]
  schedule:
    - cron: "0 18 * * *"  # 12:00 AM BD Time (UTC+6)
    - cron: "0 6 * * *"   # 12:00 PM BD Time (UTC+6)
  workflow_dispatch:

jobs:
  download-and-upload-apk:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download ZIP File
        run: |
          curl -L -o APatch.zip https://nightly.link/bmax121/APatch/workflows/build/main/APatch.zip

      - name: Extract ZIP File
        run: unzip APatch.zip -d APatch

      - name: Find APK File
        id: find_apk
        run: |
          APK_FILE=$(find APatch -name 'APatch_*-release-signed.apk' | sort | tail -n 1)
          if [ -z "$APK_FILE" ]; then
            echo "Error: No APK found." >&2
            exit 1
          fi
          echo "APK_FILE=${APK_FILE}" >> $GITHUB_ENV

      - name: Create Release Tag
        id: create_tag
        run: |
          VERSION=$(basename "${{ env.APK_FILE }}" | sed -E 's/^APatch_(.*)-release-signed\.apk$/\1/')
          echo "TAG=${VERSION}" >> $GITHUB_ENV

      - name: Check for Existing Release
        id: check_release
        run: |
          if gh release list | grep -q "${{ env.TAG }}"; then
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Remove Old Releases
        if: ${{ env.RELEASE_EXISTS == 'false' }}
        run: |
          gh release list | awk '{print $1}' | while read tag; do
            if [ "$tag" != "${{ env.TAG }}" ]; then
              gh release delete "$tag" --yes || echo "Failed to delete release: $tag"
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create New Release
        if: ${{ env.RELEASE_EXISTS == 'false' }}
        run: |
          gh release create ${{ env.TAG }} "${{ env.APK_FILE }}" \
            --title "APatch Dev Build" \
            --notes "Automatically generated release."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send Telegram Notification
        if: ${{ env.RELEASE_EXISTS == 'false' }}
        run: |
          RELEASE_URL=$(gh release view ${{ env.TAG }} --json url -q ".url")
          DOWNLOAD_LINK="https://github.com/rimehrab/APatchDev/releases/download/${{ env.TAG }}/$(basename "${{ env.APK_FILE }}")"
          MESSAGE="ðŸš€ <b>New Release Created:</b>\n\n<b>Release name:</b> APatch Dev Build\n\n<b>Tag:</b> <a href='${RELEASE_URL}'>${{ env.TAG }}</a>\n\n<b>Download:</b> ${DOWNLOAD_LINK}"
          curl -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
               -F document=@"${{ env.APK_FILE }}" \
               -F caption="$(echo -e "$MESSAGE")" \
               -F parse_mode="HTML" \
               "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}