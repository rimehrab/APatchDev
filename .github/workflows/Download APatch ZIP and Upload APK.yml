name: Download APatch ZIP and Upload APK

on:
  push:
    branches:
      - main  # Trigger on push to the main branch
  schedule:
    - cron: "0 18 * * *"  # 12:00 AM Bangladesh Time
  workflow_dispatch:  # Enables manual trigger

jobs:
  download-and-upload-apk:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download ZIP file
        run: |
          curl -L -o APatch.zip https://nightly.link/bmax121/APatch/workflows/build/main/APatch.zip

      - name: Extract ZIP file
        run: |
          unzip APatch.zip -d APatch

      - name: Find APK file
        id: find_apk
        run: |
          APK_FILE=$(find APatch -name 'APatch_*-release-signed.apk' | head -n 1)
          echo "APK_FILE=${APK_FILE}" >> $GITHUB_ENV

      - name: Create Release Tag
        id: create_tag
        run: |
          VERSION=$(basename "${APK_FILE}" | sed -E 's/^APatch_(.*)-release-signed\.apk$/\1/')
          echo "TAG=${VERSION}" >> $GITHUB_ENV

      - name: Check for Existing Release
        id: check_release
        run: |
          if gh release list | grep -q "${{ env.TAG }}"; then
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Remove Old Releases
        if: ${{ env.RELEASE_EXISTS == 'false' }}
        run: |
          gh release list | awk '{print $1}' | while read tag; do
            if [ "$tag" != "${{ env.TAG }}" ]; then
              gh release delete "$tag" --yes
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload APK to Release
        if: ${{ env.RELEASE_EXISTS == 'false' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG }}
          files: ${{ env.APK_FILE }}
          release_name: "APatch Dev Build"  # Sets the release title
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify via Telegram
        if: ${{ env.RELEASE_EXISTS == 'false' }}
        run: |
          RELEASE_URL=$(gh release view ${{ env.TAG }} --json url -q ".url")
          MESSAGE=$(echo -e "ðŸš€ New Release Created: APatch Dev Build\nTag: ${{ env.TAG }}\nDownload: ${RELEASE_URL}" | jq -sRr @uri)
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d text="$MESSAGE" \
            -d parse_mode="HTML"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}